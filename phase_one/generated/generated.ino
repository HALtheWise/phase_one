/* 

MarIOnette template file for Arduino-compatible boards

Tested on Arduino Nano (ATMega 328P), Arduino Uno, Teensy 3.2, Teensy 3.6, and Teensy 4.1

*/

#define DEBUG_SETUP 1
#define DEBUG_SERIAL 0
#define DEBUG_SD_PLAYBACK_TEST 1
#define DEBUG_MEMORY_PLAYBACK_TEST 1

#include "config.h"

void readSerialBytes(){
  int debugOut = 0;
  char inByte;

  if(Serial.available() > 0){
    char mode = Serial.read();

    // Blender sending data...
    if(mode == 'A' || mode == 'B'){
      counter = 0;

      if(IS_AVR){
        delay(SERIAL_DELAY);
      }

      else{
        delayMicroseconds(SERIAL_DELAY);
      }

      // Read in first bytes to get message length
      char one = Serial.read();
      
      if(IS_AVR){
        delay(SERIAL_DELAY);
      }

      else{
        delayMicroseconds(SERIAL_DELAY);
      }

      char two = Serial.read();

      if(mode == 'A'){
        howManyBytes = word(one, two) + expectedSpeedBytes;
      }

      else{
        howManyBytes = word(one, two);
      }
      
      if(debugOut){
        Serial.print("Expecting bytes: ");
        Serial.println(howManyBytes);
      }

      char tempBuffer[howManyBytes];

      while(Serial.available()){
        if(IS_AVR){
          delay(SERIAL_DELAY);
        }

        inByte = Serial.read();
        
        // Keep reading in case last byte is the stop char
        if(counter < howManyBytes){
          tempBuffer[counter] = inByte;

          counter++;
          if(debugOut){
            //Serial.println(counter);
          }
        }

        // Received too many bytes but no stop character...
        else if(counter >= howManyBytes && inByte != '.'){
          Serial.print("Too many bytes, expected ");    
          while(Serial.available()){
            Serial.read();
            counter++;
          }

          if(debugOut){
            Serial.print("Too many bytes, expected ");
            Serial.print(howManyBytes);
            Serial.print(" and got ");
            Serial.println(counter);
          }

          counter = 0;
          break;
        }

        // Right amount of bytes received, set motors and LEDs
        else if(counter == howManyBytes && (inByte == '.' || inByte == 46)){
          if(debugOut){
            Serial.println("Success!");
          }

          if(mode == 'A'){
            updateMotorsAndLEDs(tempBuffer, 0);
            busServoSpeed = word(tempBuffer[0], tempBuffer[1]);
          }

          else{
            updateMotorsAndLEDs(tempBuffer, 1);
            busServoSpeed = 0;
          }
        }
      }
    }

    // Play back file from SD card
    else if(mode == 'P' && !playingAnimation && SD_ENABLE){
      SDHelper(1);
    }
    
    // Stop file playback
    else if(mode == 'S' && playingAnimation && SD_ENABLE){
      SDHelper(0);
      Serial.println("Animation stopped by serial");
    }
    
    // IN PROGRESS!!!
    // Read values from dynamixels or bus servos
    else if(mode == 'R' && !readingPositions && SD_ENABLE){
      if(TOTAL_BUS_SERVOS > 0 || TOTAL_DYNAMIXELS > 0){
        // Read how long the animation is and at what FPS it runs
        //readingPositions = 1;

        //Serial.parseInt();
        //totalFrames = Serial.parseInt();
        //FPS = Serial.parseInt();

        //frameInterval = 1000*1000/FPS; // In microseconds

        //animationTimer = 0;
      }

      else{
        Serial.println("No bus servos or dynamixels configured!");
      }
    }
    

    // Cancel position reads
    else if(mode == 'Z' && readingPositions){
      readingPositions = 0;
    }
  }
}

void setup() {
  // Start Serial monitor
  Serial.begin(BAUD_RATE_SERIAL);
  Serial.println("Starting MarIOnette initialization...");

  // Perform setup, which gets dynamically generated by MarIOnette
  setupAll();
  
  Serial.println("Setup finished!");

  /*
  // Uncomment this block to test SD card animation playback 
  // Change the testFile name to whatever you exported the animation as, and then trigger it to run
  if(DEBUG_SD_PLAYBACK_TEST){
    String testFile = "test8";
    int length = testFile.length() + 1;
    testFile.toCharArray(filename, length);
    playingAnimation = 1;
    readAnimationFile();
  }
  */

  /*
  // Uncomment this block to test local animation playback 
  // Change the "animation1" name to whatever you exported the animation as, and then trigger it to run
  // Confirm there are animations available in the animations.h file
  if(DEBUG_MEMORY_PLAYBACK_TEST){
    globalArrayPointer = &Anim1;
    animationArrayPointer = (unsigned char*)Anim1[3];
    readAnimationFileMemory();
  }
  */
}

void loop() {
  // Begin reading serial port for incoming commands
  readSerialBytes();
  if(playingAnimation){
    if(!isMemoryAnimation){
      playAnimationFile();
    }

    else{
      playAnimationMemory();
    }
  }
  updateSteppers();
}